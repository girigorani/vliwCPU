library IEEE;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use IEEE.STD_LOGIC_1164.all;
use work.cpu_typedef_package.all;

entity wb_buffer is
port (
	clk    : in std_logic;	
	reset  : in std_logic;
	
	ctrl_in      : in t_ctrl;
   	
	pred_reg_w_addr	:	out std_logic_vector(PRED_ADDR_SIZE-1 downto 0);
	pred_reg_w_en		:	out std_logic;	
		
	reg_w_addr	: out std_logic_vector(REG_ADDR_SIZE-1 downto 0);
	reg_w_en		: out std_logic;
	
	halt					: out std_logic;
		
	wb_mux_sel : out std_logic_vector(1 downto 0)
	
		
	);
end wb_buffer;


architecture rtl of wb_buffer is
begin

		
	process (clk, reset, ctrl_in)
	begin
		if reset = '1' then
			reg_w_addr <= (reg_w_addr'range => '0');
			reg_w_en	  <= '0';
			
			pred_reg_w_addr 	<= (pred_reg_w_addr'range => '0');
			pred_reg_w_en		<= '0';
			halt								<= '0';
			wb_mux_sel				<= "00";
		else
			if rising_edge(clk) then
				reg_w_addr <= ctrl_in.dest_reg;
				reg_w_en	  <= ctrl_in.reg_w_en;
	
				pred_reg_w_addr <= ctrl_in.b_dest;
				pred_reg_w_en	 <= ctrl_in.pred_reg_w_en;
				
				halt	<= ctrl_in.halt;
				
				if ctrl_in.reg_w_en = '1' then
					wb_mux_sel	<= "00";
				end if;
				
				if ctrl_in.mem_rd = '1' then
					wb_mux_sel	<= "01";
				end if;			
				
			end if;	
		end if;	
	end process;

end rtl;
